// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for providing AI-powered product recommendations.
 *
 * - `getProductRecommendations` - A function that takes user data and returns a list of recommended products.
 * - `ProductRecommendationsInput` - The input type for the `getProductRecommendations` function.
 * - `ProductRecommendationsOutput` - The output type for the `getProductRecommendations` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProductCharacteristicsSchema = z.object({
  name: z.string().describe('Name of the product'),
  category: z.string().describe('Category of the product'),
  description: z.string().describe('Description of the product'),
});

const UserProfileSchema = z.object({
  viewedProducts: z.array(ProductCharacteristicsSchema).optional().describe('List of products the user has viewed'),
  purchasedProducts: z.array(ProductCharacteristicsSchema).optional().describe('List of products the user has purchased'),
});

const ProductRecommendationsInputSchema = z.object({
  userProfile: UserProfileSchema.describe('The user profile, containing viewing and purchase history.'),
  availableProducts: z.array(ProductCharacteristicsSchema).describe('The list of available products to recommend from.'),
  numberOfRecommendations: z.number().default(3).describe('The number of products to recommend.'),
});

export type ProductRecommendationsInput = z.infer<typeof ProductRecommendationsInputSchema>;

const ProductRecommendationSchema = z.object({
  product: ProductCharacteristicsSchema,
  reason: z.string().describe('The detailed reasoning why this product is recommended for the user, explaining how it matches the user preferences based on product characteristics, category, and description.'),
  matchScore: z.number().describe('A score (0-1) indicating how well the product matches the user preferences, based on viewing history and purchase data.'),
});

const ProductRecommendationsOutputSchema = z.object({
  recommendations: z.array(ProductRecommendationSchema).describe('A list of recommended products with reasons.'),
});

export type ProductRecommendationsOutput = z.infer<typeof ProductRecommendationsOutputSchema>;

export async function getProductRecommendations(input: ProductRecommendationsInput): Promise<ProductRecommendationsOutput> {
  return productRecommendationsFlow(input);
}

const productRecommendationsPrompt = ai.definePrompt({
  name: 'productRecommendationsPrompt',
  input: {schema: ProductRecommendationsInputSchema},
  output: {schema: ProductRecommendationsOutputSchema},
  prompt: `You are an AI assistant specializing in providing personalized product recommendations for a cosmetics store.

  Based on the user's viewing history and purchase data, analyze their preferences and suggest relevant products from the available catalog.

  Consider the product characteristics (name, category, description) to determine the best recommendations.

  For each recommendation, provide a detailed explanation of why the product is suitable for the user, referencing their past behavior and the product's attributes. Also provide a match score.

  User Profile:
  Viewed Products: {{#if userProfile.viewedProducts}}{{#each userProfile.viewedProducts}}- {{this.name}} ({{this.category}}): {{this.description}}
  {{/each}}{{else}}None{{/if}}
  Purchased Products: {{#if userProfile.purchasedProducts}}{{#each userProfile.purchasedProducts}}- {{this.name}} ({{this.category}}): {{this.description}}
  {{/each}}{{else}}None{{/if}}

  Available Products:
  {{#each availableProducts}}- {{this.name}} ({{this.category}}): {{this.description}}
  {{/each}}

  Number of Recommendations: {{numberOfRecommendations}}

  Provide the recommendations in the following JSON format:
  {{output}}
  `,
});

const productRecommendationsFlow = ai.defineFlow(
  {
    name: 'productRecommendationsFlow',
    inputSchema: ProductRecommendationsInputSchema,
    outputSchema: ProductRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await productRecommendationsPrompt(input);
    return output!;
  }
);
